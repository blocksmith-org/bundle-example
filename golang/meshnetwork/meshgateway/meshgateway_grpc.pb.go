// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.4
// source: meshgateway/meshgateway.proto

package meshgateway

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MeshgatewayClient is the client API for Meshgateway service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MeshgatewayClient interface {
	SubscribeTx(ctx context.Context, in *SubscribeTxReq, opts ...grpc.CallOption) (Meshgateway_SubscribeTxClient, error)
}

type meshgatewayClient struct {
	cc grpc.ClientConnInterface
}

func NewMeshgatewayClient(cc grpc.ClientConnInterface) MeshgatewayClient {
	return &meshgatewayClient{cc}
}

func (c *meshgatewayClient) SubscribeTx(ctx context.Context, in *SubscribeTxReq, opts ...grpc.CallOption) (Meshgateway_SubscribeTxClient, error) {
	stream, err := c.cc.NewStream(ctx, &Meshgateway_ServiceDesc.Streams[0], "/meshgateway.meshgateway/SubscribeTx", opts...)
	if err != nil {
		return nil, err
	}
	x := &meshgatewaySubscribeTxClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Meshgateway_SubscribeTxClient interface {
	Recv() (*SubscribeTxResp, error)
	grpc.ClientStream
}

type meshgatewaySubscribeTxClient struct {
	grpc.ClientStream
}

func (x *meshgatewaySubscribeTxClient) Recv() (*SubscribeTxResp, error) {
	m := new(SubscribeTxResp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MeshgatewayServer is the server API for Meshgateway service.
// All implementations must embed UnimplementedMeshgatewayServer
// for forward compatibility
type MeshgatewayServer interface {
	SubscribeTx(*SubscribeTxReq, Meshgateway_SubscribeTxServer) error
	mustEmbedUnimplementedMeshgatewayServer()
}

// UnimplementedMeshgatewayServer must be embedded to have forward compatible implementations.
type UnimplementedMeshgatewayServer struct {
}

func (UnimplementedMeshgatewayServer) SubscribeTx(*SubscribeTxReq, Meshgateway_SubscribeTxServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeTx not implemented")
}
func (UnimplementedMeshgatewayServer) mustEmbedUnimplementedMeshgatewayServer() {}

// UnsafeMeshgatewayServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MeshgatewayServer will
// result in compilation errors.
type UnsafeMeshgatewayServer interface {
	mustEmbedUnimplementedMeshgatewayServer()
}

func RegisterMeshgatewayServer(s grpc.ServiceRegistrar, srv MeshgatewayServer) {
	s.RegisterService(&Meshgateway_ServiceDesc, srv)
}

func _Meshgateway_SubscribeTx_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeTxReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MeshgatewayServer).SubscribeTx(m, &meshgatewaySubscribeTxServer{stream})
}

type Meshgateway_SubscribeTxServer interface {
	Send(*SubscribeTxResp) error
	grpc.ServerStream
}

type meshgatewaySubscribeTxServer struct {
	grpc.ServerStream
}

func (x *meshgatewaySubscribeTxServer) Send(m *SubscribeTxResp) error {
	return x.ServerStream.SendMsg(m)
}

// Meshgateway_ServiceDesc is the grpc.ServiceDesc for Meshgateway service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Meshgateway_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "meshgateway.meshgateway",
	HandlerType: (*MeshgatewayServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubscribeTx",
			Handler:       _Meshgateway_SubscribeTx_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "meshgateway/meshgateway.proto",
}
